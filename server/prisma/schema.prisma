generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())

  isOnline    Boolean   @default(false)
  lastActive  DateTime?

  messages      Message[]
  conversations ConversationParticipant[]
  reactions     MessageReaction[]
}

model Conversation {
  id           String                      @id @default(cuid())
  isGroup      Boolean                     @default(false)
  createdAt    DateTime                    @default(now())

  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String?
  imageUrl       String?
  createdAt      DateTime     @default(now())

  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  reactions      MessageReaction[]
}

model MessageReaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([messageId, userId, emoji])
}
